#!/bin/bash

#    modules at any shell modules for bash script language - more than a snake
#    Copyright (C) 2021  lazypwny
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>
#    This program is distributed in the hope that it will be useful,

### VARIABLES
## local variables
version="1.0"
maintainer="lazypwny"

# your module repository as raw
# note: only 1 repo can be use for version 1.0.
repoasraw="https://raw.githubusercontent.com/lazypwny751/regular-modules/main"

# modüllerin olduğu dizin
moduleshlibdir="/usr/local/lib/modulesh"

# modüllerin yardımcı araçlarını kullanabileceği dizin
modulesdir="/usr/share/modulesh/modulesdir"

# manuallerin olduğu dizin
mandir="/usr/share/modulesh/manuals"

# geçici dizin
tmpdir="/tmp/modulesh"

## Colors
# Reset
reset='\033[0m'           # Text Reset

# Regular Colors
black='\033[0;30m'        # Black
red='\033[0;31m'          # Red
green='\033[0;32m'        # Green
yellow='\033[0;33m'       # Yellow
blue='\033[0;34m'         # Blue
purple='\033[0;35m'       # Purple
cyan='\033[0;36m'         # Cyan
white='\033[0;37m'        # White

# Bold
Bblack='\033[1;30m'       # Black
Bred='\033[1;31m'         # Red
Bgreen='\033[1;32m'       # Green
Byellow='\033[1;33m'      # Yellow
Bblue='\033[1;34m'        # Blue
Bpurple='\033[1;35m'      # Purple
Bcyan='\033[1;36m'        # Cyan
Bwhite='\033[1;37m'       # White

checknet() {
    if ! ping -q -c 1 -W 1 google.com >/dev/null ; then
        echo -e "[${red}-${reset}]please check your internet connection."
        exit 1
    fi
}

checkdepend() {
    [ $(command -v ${1}) ] || { echo -e "i require ${yellow}${1}${reset} please install it then try again." ; exit 1 ; }
}

checkdir() {
    [ -d ${1} ] || { echo -e "i can't find the directory: ${1} please check your installation" ; exit 1 ; }
}

# All in one.
case ${1} in
    [hH][eE][lL][pP]|--[hH][eE][lL][pP])
        echo -e "${Bwhite}Flags${reset}: ${yellow}<module name(s)>${reset} ${blue}--help${reset}, ${blue}--version${reset}, ${blue}--list${reset}, ${blue}--install${reset}, ${blue}--localinstall${reset}, ${blue}--makepackage${reset}, ${blue}--uninstall${reset}, ${blue}--man${reset}.

${Byellow}<module name(s)>${reset}: Simple usage: If you specify the names of the modules directly in the script, you can import them. You can use more than one module at the same time. The moduleincludestatus variable
has been assigned so that you can adjust the priority of the faulty modules according to your request. If this variable outputs 1, the imported module is incorrect.

--${Byellow}help${reset}: help argument shows this menu, also you can use at most one argument and one parameter at a time (except importing modules inside the script).

--${Byellow}version${reset}: prints the current version and producer name.

--${Byellow}list${reset}: It lists the local modules in modulesh's system.

--${Byellow}install${reset}: It downloads and installs the existing module package with .tar.gz extension from git repository. It is used with at most one parameter and .tar.gz is not written to 
the end of the packages in the parameter.

--${Byellow}localinstall${reset}: specifying the file location of the local .tar.gz module package
Maximum 1 parameter can be used each time it installs and .tar.gz is not written.

--${Byellow}makepackage${reset}: You can create the modules package from the source files that you have prepared according to the package creation procedure, then you can install this package with --install or
use --localinstall by specifying locally. You can create a maximum of 1 package each time. To create a package, specify the path of the source directory as a parameter, then it will output as package.tar.gz in 
the directory you are in. Also please read the procedure.

--${Byellow}uninstall${reset}: You can delete a module installed in modulesh's system, you can delete a maximum of 1 module each time.

--${Byellow}man${reset}: If there is a manual file prepared for the relevant package or it may be in any manual file about the modules, it shows the content of this file

An alternative module management script developed for modules bourne again shell is that when it is fully finished, there will be a lot of useful modules in it.
"
        exit 0
    ;;
    [vV][eE][rR][sS][iI][oO][nN]|--[vV][eE][rR][sS][iI][oO][nN]|-[vV])
        echo -e "${version} ${maintainer}"
        exit 0
    ;;
    [lL][iI][sS][tT]|--[lL][iI][sS][tT]|-[lL])
        ls ${moduleshlibdir}/*.sh 2> /dev/null | sed 's/\.sh//g'
        echo -e "\nlocal modules @ $moduleshlibdir [$(ls ${moduleshlibdir}/*.sh 2> /dev/null | wc -l)]\n========================"
        cd ${mandir} || { echo "cannot access the $mandir" ; exit 1 ; }
        ls ${mandir}/*.man 2> /dev/null | sed 's/\.man//g'
        cd - &> /dev/null
        echo -e "\nlocal manuals @ $mandir [$(ls ${mandir}/*.man 2> /dev/null | wc -l)]"
        exit 0
    ;;
    [iI][nN][sS][tT][aA][lL][lL]|--[iI][nN][sS][tT][aA][lL][lL]|-[iI])
        # check local variables
        [ -z ${repoasraw} ] && { echo "main repo variable is can not be null!" ; exit 1 ; }
        checknet
        [ $(command -v tar) ] || { echo -e "please install the ${red}tar${reset} package." ; exit 1 ; }
        [ $(command -v wget) ] || { echo -e "please install the ${red}wget${reset} package." ; exit 1 ; }                
        [ -z ${2} ] && { echo "please give the module name of the package on your git repository without .tar.gz" ; exit 1 ; }        
        [ -d ${tmpdir} ] && rm -rf ${tmpdir}
        mkdir ${tmpdir} && cd ${tmpdir}
        wget ${repoasraw}/${2}.tar.gz && echo -e "${green}Get${reset}: ${2}.tar.gz downloaded." || { echo -e "${red}Error${reset}: file or repository doesn't exist!" ; exit 1 ;}
        tar -xf ${2}.tar.gz && rm ${2}.tar.gz || { echo -e "${red}Error${reset}: Can not extracking the data here!" ; exit 1 ; }  
        [ -d ./MODULESH ]  && { [ -e ./MODULESH/index ] && source ./MODULESH/index || { echo -e "index file doesn't exist please read the manual." ; cd .. ; rm -rf ${base} ; exit 1 ; } ; } || { echo "the metadata dir doesn't exist please read the manual." ; cd .. ; rm -rf ${base} ; exit 1 ; }
        [ ! -z $package ] && echo -e "your trigger replacing to ${moduleslibdir}/${package}.sh\nyour base directory creating in ${modulesdir} as ${package}" || { echo -e "Please specify the base variable in your index file. This variable will open a base variable for you in $modulesdir.\nIt must also have the same name as the trigger name, for example, if your trigger is modulesh.sh, it should be package='modulesh'\nalso your manual file can be just package.man for example modulesh.man" ; cd .. ; rm -rf ${base} ; exit 1 ; }
        { [ -d ${modulesdir}/${package} ] && { rm -rf ${modulesdir}/${package} ; mkdir ${modulesdir}/${package} ; } || mkdir ${modulesdir}/${package} ; } && echo "${modulesdir}/${package}.. created" || { echo "base directory can not creating please contact with maintainer or search a solution ${0}:$LINENO" ; cd .. ; rm -rf ${base} ; exit 1 ; }

        if [ -e ./${package} ] ; then
            mv ${package} ${moduleshlibdir} && echo "trigger of the module ${package} has been installed."
        elif [ -e ./${package}.sh ] ; then
            mv ${package}.sh ${moduleshlibdir} && echo "trigger of the module ${package}.sh has been installed."
        else
            echo "error@${0}:${LINENO}: main trigger can not installing on this time please contact with the maintainer or search any solution on: https://stackoverflow.com"
            exit 1
        fi
    
        if [ -e ./${package}.man ] ; then
            mv ${package}.man ${mandir} && echo "manual of the module ${package} has been copied."
        elif [ -e ./*.man ] ; then
            mv ./*.man ${mandir} && echo "manual(s) of the module has been installed. One ore more manual files has been copied to the ${mandir}."
        else
            echo "Warn: your manual file not found or can not definied (do you know what you are doing?)"
        fi
        rm -rf MODULESH
        mv * ${modulesdir}/${base} 2> /dev/null || echo "no assets found"
        echo -e "${green}Success${reset}: module ${package} has been installed."
        cd -
        rm -rf ${tmpdir}
        exit 0
    ;;
    [lL][oO][cC][aA][lL][iI][nN][sS][tT][aA][lL][lL]|--[lL][oO][cC][aA][lL][iI][nN][sS][tT][aA][lL][lL]|-[lL][iI])
        [ $(command -v tar) ] || { echo -e "please install the ${red}tar${reset} package." ; exit 1 ; }
        [ -z ${2} ] && { echo "please give the location of your module package file." ; exit 1 ; } || { [ -e ${2}.tar.gz ] || { echo "package file doesn't exist! Please give the package location without '.tar.gz'" ; exit 1 ; } ; }
        base=$(echo "${2}" | tr "/" " " | awk '{print $NF}')
        if [ -e ${moduleshlibdir}/${2} ] || [ -e ${moduleshlibdir}/${2}.sh ] ; then
            echo "the module ${2}.sh already exist. Please remove the old module for install the new version."
        else
            [ -d ${tmpdir} ] && rm -rf ${tmpdir}
            mkdir ${tmpdir} && cp ${2}.tar.gz ${tmpdir} && cd ${tmpdir}
            tar -xf ${2}.tar.gz && rm ${2}.tar.gz || { echo -e "${red}Error${reset}: Can not extracking the data here!" ; exit 1 ; }  
            [ -d ./MODULESH ]  && { [ -e ./MODULESH/index ] && source ./MODULESH/index || { echo -e "index file doesn't exist please read the manual." ; cd .. ; rm -rf ${base} ; exit 1 ; } ; } || { echo "the metadata dir doesn't exist please read the manual." ; cd .. ; rm -rf ${base} ; exit 1 ; }
            [ ! -z $package ] && echo -e "your trigger replacing to ${moduleslibdir}/${package}.sh\nyour base directory creating in ${modulesdir} as ${package}" || { echo -e "Please specify the base variable in your index file. This variable will open a base variable for you in $modulesdir.\nIt must also have the same name as the trigger name, for example, if your trigger is modulesh.sh, it should be package='modulesh'\nalso your manual file can be just package.man for example modulesh.man" ; cd .. ; rm -rf ${base} ; exit 1 ; }
            { [ -d ${modulesdir}/${package} ] && { rm -rf ${modulesdir}/${package} ; mkdir ${modulesdir}/${package} ; } || mkdir ${modulesdir}/${package} ; } && echo "${modulesdir}/${package}.. created" || { echo "base directory can not creating please contact with maintainer or search a solution ${0}:$LINENO" ; cd .. ; rm -rf ${base} ; exit 1 ; }
            
            if [ -e ./${package} ] ; then
                mv ${package} ${moduleshlibdir} && echo "trigger of the module ${package} has been installed."
            elif [ -e ./${package}.sh ] ; then
                mv ${package}.sh ${moduleshlibdir} && echo "trigger of the module ${package}.sh has been installed."
            else
                echo "error@${0}:${LINENO}: main trigger can not installing on this time please contact with the maintainer or search any solution on: https://stackoverflow.com"
                exit 1
            fi
            
            if [ -e ./${package}.man ] ; then
                mv ${package}.man ${mandir} && echo "manual of the module ${package} has been copied."
            elif [ -e ./*.man ] ; then
                mv ./*.man ${mandir} && echo "manual(s) of the module has been installed. One ore more manual files has been copied to the ${mandir}."
            else
                echo "Warn: your manual file not found or can not definied (do you know what you are doing?)"
            fi
            rm -rf MODULESH
            mv * ${modulesdir}/${base} 2> /dev/null || echo "no assets found"
            echo -e "${green}Success${reset}: module ${package} has been installed."
            cd -
            rm -rf ${tmpdir}
            exit 0
        fi
    ;;
    [mM][aA][kK][eE][pP][aA][cC][kK][aA][gG][eE]|--[mM][aA][kK][eE][pP][aA][cC][kK][aA][gG][eE]|-[mM][pP])
        [ $(command -v tar) ] || { echo -e "please install the ${red}tar${reset} package." ; exit 1 ; }
        [ -z ${2} ] && { echo "please give location of your module directory." ; exit 1 ; } || { [ -d ${2} ] || { echo "directory doesn't exist!" ; exit 1 ; } ; }  
        [ -d ${2}/MODULESH ] && { [ -e ${2}/MODULESH/index ] && source ${2}/MODULESH/index || { echo -e "index file doesn't exist please read the f*cking manual." ; exit 1 ; } ; } || { echo "the metadata dir doesn't exist please read the f*cking manual." ; exit 1 ; }
        [ ! -z $package ] && echo -e "your trigger will be repleaced to ${moduleslibdir}/${package}.sh\nyour basedir will be created to ${modulesdir}/${package}" || { echo -e "Please specify the base variable in your index file. This variable will open a base variable for you in $modulesdir.\nIt must also have the same name as the trigger name, for example, if your trigger is modulesh.sh, it should be package='modulesh'\nalso your manual file can be just package.man for example modulesh.man" ; exit 1 ; }
        [ -e ${2}/${package}.man ] && echo "manual file found." || echo -e "${yellow}Warn!${reset} manual page not found!\nif the manual file name as different by package name so the file will be copyied to the base of module."
        cd ${2}
        tar -czvf ${package}.tar.gz * && { mv ${package}.tar.gz .. && echo -e "${green}package created as ./${package}.tar.gz${reset}" ; } || { echo -e "${red}can not creating the package in this directory!${reset}" ; exit 1 ; }
        exit 0
    ;;
    [uU][nN][iI][nN][sS][tT][aA][lL][lL]|--[uU][nN][iI][nN][sS][tT][aA][lL][lL]|-[uU])
        [ -z ${2} ] && { echo "please give name of the module you want to remove for example: '${blue}$0 --uninstall color${reset}'." ; exit 1 ; }
        
        # rm trigger
        if [ -e ${moduleshlibdir}/${2} ] ; then
            rm ${moduleshlibdir}/${2} && echo -e "${green}Success${reset}: trigger has been removed."
        elif [ -e ${moduleshlibdir}/${2}.sh ] ; then
            rm ${moduleshlibdir}/${2}.sh && echo -e "${green}Success${reset}: trigger has been removed."
        else
            echo -e "${red}Sorry${reset}: i can't find the trigger."
        fi

        # rm basedir
        if [ -d ${modulesdir}/${2} ] ; then
            rm -rf ${modulesdir}/${2}
        else
            echo -e "${red}Sorry${reset}: i can't find the base directory."        
        fi

        # rm manual
        if [ -e ${mandir}/${2} ] ; then
            rm ${mandir}/${2} && echo -e "${green}Success${reset}: manual file has been removed."
        elif [ -e ${mandir}/${2}.man ] ; then
            rm ${mandir}/${2}.man && echo -e "${green}Success${reset}: manual file has been removed."
        else
            echo -e "${red}Sorry${reset}: i can't find the manual file."
        fi

        exit 0
    ;;
    [mM][aA][nN]|--[mM][aA][nN])
        checkdir ${mandir}
        [ -z ${2} ] && { echo -e "[${red}-${reset}] please type the name of the manual you want to search as 2nd argument." ; exit 1 ; }
        if [ -e "${mandir}/${2}.man" ] ; then
            cat "${mandir}/${2}.man"
        elif [ -e "${mandir}/${2}" ] ; then
            cat "${mandir}/${2}"
        else
            echo -e "\nno manuals found for module '${blue}${2}${reset}'\n"
            exit 1
        fi
        exit 0
    ;;
    *)
        if ! [ $# -lt 1 ] ; then

            for i in $( seq 1 $# ) ; do
                if [ -e "${moduleshlibdir}/${@:i:1}.sh" ] ; then
                    source "${moduleshlibdir}/${@:i:1}.sh"
                    moduleincludestatus="0"
                elif [ -e "${moduleshlibdir}/${@:i:1}" ] ; then
                    source "${moduleshlibdir}/${@:i:1}"
                    moduleincludestatus="0"
                else
                    echo -e "\nno module found: '${blue}${@:i:1}${reset}', type '${yellow}${BASH_SOURCE[0]} --list${reset}' to\nsee available modules and '${yellow}${BASH_SOURCE[0]} --man <module-name>${reset}' to get\ninformation about these modules.\n"
                    moduleincludestatus="1"
                fi
            done
        else    
            echo -e "If you want to know how to use it, try '${yellow}${BASH_SOURCE[0]} --help${reset}'"
            moduleincludestatus="1"
        fi
    ;;
esac